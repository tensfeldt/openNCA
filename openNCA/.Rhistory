getwd()
setwd("C:/Users/RonishBDesaiRudraya/Documents/")
user <- "ronish"
pass <- "Summer2019!"
pathToData <- "ZipFile.zip"
proj <- "TA_1-T_1-RonishTest2"
file_name <- ""
body <- list(user = user, project = proj, fileName = file_name, fileData = httr::upload_file(pathToData), extractZip="true")
url <- "http://dev.sonic.rudraya.cloud"
req_url <- paste0(url,"/svn/api/uploadFileToProject")
req_url
ret <- httr::POST(req_url, body = body, httr::authenticate(user, pass), encode = "multipart")
ret
library(shiny); runApp('AAT_app_server.R')
install.packages("ggrepel")
runApp('AAT_app_server.R')
runApp('luma_app.R')
installed.packages()[,c(1,6)]
installed.packages()[,c(6)]
as.table(installed.packages()[,c(6)])
as.data.frame(installed.packages()[,c(6)])
test<- as.data.frame(installed.packages()[,c(6)])
test$`installed.packages()[, c(6)]`
melt_csv(readr_example("mtcars.csv"))
readr::melt_csv(readr_example("mtcars.csv"))
readr::melt_csv(readr::readr_example("mtcars.csv"))
x <- c("09:10:01", "09:10:02", "09:10:03")
lubridate::hms(x)
knitr::kable(head(iris), format = "html", caption = "Title of the table")
knitr::kable(head(iris), format = "latex")
mpg
ggplot2::mpg
q()
installed.packages()[,c(1:3)]
row.names(installed.packages()[,c(1:3)])
file.exists()
getwd()
file.exists("File3.txt")
read.delim("openNCA_input.txt")
read.delim("openNCA_input.txt", sep = ",")
"C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv"
read.csv("openNCA_input.csv")
test <- read.csv("openNCA_input.csv")
View(test)
names(test)
test <- read.csv("openNCA_input.csv")
names(test)
test["DATA_FILE_PATH"]
test["MAP_FILE_PATH"]
test <- read.csv("openNCA_input.csv")
names(test)
test <- read.csv("openNCA_input.csv")
names(test)
test <- read.csv("openNCA_input.csv")
names(test)
c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH")
c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(test)
all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(test))
if("openNCA" %in% row.names(installed.packages()[,c(1:3)])){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if("openNCA" %in% row.names(installed.packages()[,c(1:3)])){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!file.exists("openNCA_input.csv")){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv")
if(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config["MAP_FILE_PATH"], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config["DATA_FILE_PATH"], map = input_config["MAP_FILE_PATH"], flag = input_config["FLAG_FILE_PATH"], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
library(openNCA)
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!(file.exists("openNCA_input.csv"))){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv")
if(!(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config)))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config["MAP_FILE_PATH"], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config["DATA_FILE_PATH"], map = input_config["MAP_FILE_PATH"], flag = input_config["FLAG_FILE_PATH"], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!(file.exists("openNCA_input.csv"))){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv")
if(!(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config)))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config["MAP_FILE_PATH"], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config["DATA_FILE_PATH"], map = input_config["MAP_FILE_PATH"], flag = input_config["FLAG_FILE_PATH"], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
input_config <- read.csv("openNCA_input.csv", stringsAsFactors = FALSE)
mct <- read.csv(file = input_config["MAP_FILE_PATH"], stringsAsFactors = FALSE)
input_config["MAP_FILE_PATH"]
as.character(input_config["MAP_FILE_PATH"])
input_config[["MAP_FILE_PATH"]]
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!(file.exists("openNCA_input.csv"))){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv", stringsAsFactors = FALSE)
if(!(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config)))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config[["MAP_FILE_PATH"]], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config[["DATA_FILE_PATH"]], map = input_config[["MAP_FILE_PATH"]], flag = input_config[["FLAG_FILE_PATH"]], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!(file.exists("openNCA_input.csv"))){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv", stringsAsFactors = FALSE)
if(!(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config)))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config[["MAP_FILE_PATH"]], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config[["DATA_FILE_PATH"]], map = input_config[["MAP_FILE_PATH"]], flag = input_config[["FLAG_FILE_PATH"]], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
names(input_config)
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
if(!(file.exists("openNCA_input.csv"))){
stop(paste0("Input file 'openNCA_input.csv' does not exist in the directory '", getwd(), "'"))
}
input_config <- read.csv("openNCA_input.csv", stringsAsFactors = FALSE)
if(!(all(c("DATA_FILE_PATH", "MAP_FILE_PATH", "FLAG_FILE_PATH") %in% names(input_config)))){
stop(paste0("Input file 'openNCA_input.csv' does not have columns 'DATA_FILE_PATH' and/or 'MAP_FILE_PATH' and/or 'FLAG_FILE_PATH'"))
}
mct <- read.csv(file = input_config[["MAP_FILE_PATH"]], stringsAsFactors = FALSE)
result <- openNCA::run_computation(data = input_config[["DATA_FILE_PATH"]], map = input_config[["MAP_FILE_PATH"]], flag = input_config[["FLAG_FILE_PATH"]], parameterset = "PARAMETERDISPLAYLIST")
write.csv(result$data_out, "openNCA_output.csv")
library(openNCA)
remove.packages("openNCA")
remove.packages("openNCA")
setwd("C:/Users/RonishBDesaiRudraya/Documents/GitHub/openNCA/openNCA/")
devtools::install()
getwd()
setwd("..")
devtools::install("openNCA")
setwd("openNCA/")
setwd("openNCA")
devtools::install("openNCA")
devtools::install()
remove.packages("devtools")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install()
as.list(sys.call())[[1]]
devtools::install()
input_config <- read.csv("C:/Users/RonishBDesaiRudraya/Documents/openNCA_input.csv", stringsAsFactors = FALSE)
openNCA::run_computation(data = input_config[["DATA_FILE_PATH"]], map = input_config[["MAP_FILE_PATH"]], flag = input_config[["FLAG_FILE_PATH"]], parameterset = "PARAMETERDISPLAYLIST")
openNCA::run_computation(data = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv", map = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv", flag = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/flag.csv")
openNCA::run_computation(data = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv", map = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/map.csv", flag = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/flag.csv")
openNCA::run_computation(data = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv", map = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/map.csv", flag = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/flag.csv", parameterset = "PARAMETERDISPLAYLIST")
res <- openNCA::run_computation(data = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/data.csv", map = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/map.csv", flag = "C:/Users/RonishBDesaiRudraya/Documents/openNCA-master/flag.csv", parameterset = "PARAMETERDISPLAYLIST")
if(!("openNCA" %in% row.names(installed.packages()[,c(1:3)]))){
stop("Package 'openNCA' is not currently installed on the system! Please install the package prior to running the script!")
}
source('~/openNCA_testing.R')
source('~/openNCA_testing.R')
date()
format(date(), format = "%m/%d/%Y")
strptime(date())
strptime(date(), "%Y-%m-%d %H:%M:%S")
strptime(date(), "%Y-%m-%d %H:%M:%S")
strptime(Sys.time(), "%Y-%m-%d %H:%M:%S")
strptime(Sys.time(), "%Y-%m-%d_%H:%M")
strptime(Sys.time(), "%Y-%m-%d_%H:%M")
strptime(Sys.time(), "%Y-%m-%d %H:%M")
Sys.time()
format(Sys.time(), "%a %b %d %X %Y %Z")
